SET SERVEROUTPUT ON
SET VERIFY OFF
/* Crea un BLOQUE DE PL/SQL  
 que devuelva TRUE o FALSE. COMPRUEBE DADO UN número de habitación 
 y si la habitación está actualmente ocupada devolverá TRUE, de lo contrario, devolverá FALSE; 
Nota: la habitación se considerará libre si la fecha de hoy no está entre la fecha de inicio y la fecha de fin. 	
*/

DECLARE 
    NH HABITACIONES.NUMHABITACION%TYPE:=&NUMERO_HABITACION;
    CONT NUMBER:=0;
BEGIN
    SELECT COUNT(*) INTO CONT
    FROM RESERVAS 
    WHERE NUMHABITACION=NH AND
          SYSDATE BETWEEN FECHAENTRADA AND FECHASALIDA;
          
    IF CONT=1 THEN 
        DBMS_OUTPUT.PUT_LINE('HABITACIÓN OCUPADA');
    ELSE
        DBMS_OUTPUT.PUT_LINE('HABITACIÓN LIBRE');
    END IF;
END;  

CREATE OR REPLACE FUNCTION COMPRUEBA_DISPONIBILIDAD(NH HABITACIONES.NUMHABITACION%TYPE) 
RETURN BOOLEAN
IS 
    CONT NUMBER:=0;
BEGIN 
    SELECT COUNT(*) INTO CONT
    FROM RESERVAS 
    WHERE NUMHABITACION=NH AND
          SYSDATE BETWEEN FECHAENTRADA AND FECHASALIDA;
          
    IF CONT=1 THEN 
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
    
    --RETURN CONT=1;

END;


-- BLOQUE PARA PROBAR LA FUNCIÓN DISPONIBILIDAD
DECLARE

BEGIN
    IF COMPRUEBA_DISPONIBILIDAD(&NUMERO_DE_HABITACION)=TRUE THEN
        DBMS_OUTPUT.PUT_LINE('HABITACIÓN OCUPADA');
    ELSE
        DBMS_OUTPUT.PUT_LINE('HABITACIÓN LIBRE');
    END IF;
END;


-- EJERCICIO 2: FALTA EN LA SOLUCIÓN. 
CREATE OR REPLACE PROCEDURE RESERVA_EXPRESS(NH HABITACIONES.NUMHABITACION%TYPE, 
                                            CC CLIENTES.CODIGOCLIENTE%TYPE) IS
 COD_CLI CLIENTES.CODIGOCLIENTE%TYPE; 
 COD_CLI_EXCEPTION EXCEPTION;
 COD_NH_EXCEPTION EXCEPTION;
 CONT NUMBER(1);
BEGIN 
    IF COMPRUEBA_DISPONIBILIDAD(NH)=TRUE THEN
       DBMS_OUTPUT.PUT_LINE('HABITACIÓN OCUPADA');
    ELSE
        -- QUE EXISTA EL CLIENTE
        SELECT COUNT(CODIGOCLIENTE) INTO CONT 
        FROM CLIENTES WHERE CODIGOCLIENTE=CC;
        IF CONT=0 THEN
            RAISE COD_CLI_EXCEPTION;
        END IF;
            
        -- QUE EXISTA LA HABITACIÓN
        SELECT COUNT(NUMHABITACION) INTO CONT 
        FROM HABITACIONES WHERE NUMHABITACION=NH;
        IF CONT=0 THEN
            RAISE COD_NH_EXCEPTION;
        END IF;
        
        INSERT INTO RESERVAS VALUES((SELECT MAX(CODRESERVA)+1 
                                      FROM RESERVAS),
                                      NH,CC,0,SYSDATE,SYSDATE+1,0);
        
        DBMS_OUTPUT.PUT_LINE('HABITACIÓN '||NH ||' RESERVADA CON EXITO');
    END IF;

    EXCEPTION
        WHEN COD_CLI_EXCEPTION THEN 
            DBMS_OUTPUT.PUT_LINE('NO EXISTE EL CLIENTE');
        WHEN COD_NH_EXCEPTION THEN 
            DBMS_OUTPUT.PUT_LINE('NO EXISTE LA HABITACIÓN');
        WHEN OTHERS THEN 
            DBMS_OUTPUT.PUT_LINE('ERROR INESPERADO');
END;

-- SOLO SALTA EL PRIMER ERROR.
-- INSERCIÓN CORRECTA
EXEC RESERVA_EXPRESS(302,1);
-- HABITACION OCUPADA
EXEC RESERVA_EXPRESS(101,1);
-- CLIENTE INEXISTENTE
EXEC RESERVA_EXPRESS(302,455);
-- HABITACIÓN INEXISTENTE
EXEC RESERVA_EXPRESS(602,1);

/* a) Añade un campo a la tabla HABITACIONES, llamado NUMRESERVAS. */
ALTER TABLE HABITACIONES DROP COLUMN NUMRESERVAS;
ALTER TABLE HABITACIONES ADD (NUMRESERVAS NUMBER(3) DEFAULT 0 NOT NULL);
/*

b)	Actualiza el valor del campo NUMRESERVAS con el número de veces que se 
ha reservado cada habitación.
*/
UPDATE HABITACIONES H SET NUMRESERVAS  =(SELECT COUNT(*)
                                        FROM RESERVAS R
                                        WHERE H.NUMHABITACION = R.NUMHABITACION);

-- CONSULTA QUE DEVUELVA EL NUMERO DE RESERVAS DE CADA HABITACIÓN
SELECT NUMHABITACION, COUNT(NUMHABITACION)
FROM RESERVAS
GROUP BY NUMHABITACION;

/*
c)	Crea un TRIGGER que mantenga actualizado este campo en los 
siguientes casos:
a.	Al realizarse una nueva reserva, incrementando el valor del campo. 
b.	Cuando se produzca una cancelación (borrado), restando en uno el 
valor del campo.
c.	Cuando el usuario decida cambiar de habitación, sumando o restando 
según corresponda. Solo debe contemplarse la modificación del 
campo número de la habitación. 
*/
CREATE OR REPLACE TRIGGER TABLA_HABITACIONES 
BEFORE INSERT OR DELETE OR UPDATE ON RESERVAS FOR EACH ROW
DECLARE

BEGIN
    IF INSERTING THEN 
        UPDATE HABITACIONES SET NUMRESERVAS=NUMRESERVAS+1
        WHERE NUMHABITACION=:NEW.NUMHABITACION;
    END IF;
    IF DELETING THEN
        UPDATE HABITACIONES SET NUMRESERVAS=NUMRESERVAS-1
        WHERE NUMHABITACION=:OLD.NUMHABITACION;
    END IF;
    IF UPDATING('NUMHABITACION') THEN
        UPDATE HABITACIONES SET NUMRESERVAS=NUMRESERVAS+1
        WHERE NUMHABITACION=:NEW.NUMHABITACION;
        UPDATE HABITACIONES SET NUMRESERVAS=NUMRESERVAS-1
        WHERE NUMHABITACION=:OLD.NUMHABITACION;
    END IF;
END;


-- CON ESTE TRIGGER SE ACTUALIZAN TODOS LOS CAMPOS CADA VEZ 
-- QUE SE PRODUCE UN CAMBIO EN LA TABLA DE RESERVARS. 
CREATE OR REPLACE TRIGGER TABLA_HABITACIONES_A_NIVEL_TABLA 
BEFORE INSERT OR DELETE OR UPDATE ON RESERVAS 
DECLARE
BEGIN
   UPDATE HABITACIONES H SET NUMRESERVAS  =(SELECT COUNT(*)
                                        FROM RESERVAS R
                                        WHERE H.NUMHABITACION = R.NUMHABITACION); 
END;

-- INSERT PARA INSERTAR EN RESERVAS. 
INSERT INTO RESERVAS VALUES((SELECT MAX(CODRESERVA)+1 
                                      FROM RESERVAS),
                                      101,1,0,SYSDATE+20,SYSDATE+21,0);



